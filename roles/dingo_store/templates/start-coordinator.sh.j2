#!/bin/bash

mydir="${BASH_SOURCE%/*}"
if [[ ! -d "$mydir" ]]; then mydir="$PWD"; fi
. $mydir/shflags


DEFINE_string role 'coordinator' 'server role'
DEFINE_boolean clean_db 1 'clean db'
DEFINE_boolean clean_raft 1 'clean raft'
DEFINE_boolean clean_log 0 'clean log'
DEFINE_boolean replace_conf 0 'replace conf'

# parse the command-line
FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"


BASE_DIR=$(dirname $(cd $(dirname $0); pwd))
DIST_DIR=$BASE_DIR/dist



if [ ! -d "$DIST_DIR" ]; then
  mkdir "$DIST_DIR"
fi

SERVER_HOST={{ inventory_hostname | default('127.0.0.1') }}
RAFT_HOST={{ inventory_hostname | default('127.0.0.1') }}
COORDINATOR_RAFT_START_PORT={{ dingo_store_coordinator_raft_port }}
COORDINATOR_SERVER_START_PORT={{ dingo_store_coordinator_exchange_port }}
COOR_RAFT_PEERS={{ dingo_coordinator_raft_connection_list }}
COOR_SRV_PEERS={{ dingo_store_store_exchange_connection_list }}
INSTANCE_START_ID={{ 1000 | int +  groups['coordinator'].index(inventory_hostname) | int }}
TMP_COORDINATOR_SERVICES=$BASE_DIR/build/bin/coor_list

source $mydir/deploy_func.sh

deploy() {
  echo "# dingo-store coordinators" > ${TMP_COORDINATOR_SERVICES}
  echo $COOR_SRV_PEERS | tr ',' '\n' >> ${TMP_COORDINATOR_SERVICES}
  
  program_dir=$BASE_DIR/dist/${FLAGS_role}1
  deploy_store ${FLAGS_role} $BASE_DIR $program_dir $COORDINATOR_SERVER_START_PORT $COORDINATOR_RAFT_START_PORT $INSTANCE_START_ID ${COOR_RAFT_PEERS} ${TMP_COORDINATOR_SERVICES}

}



start() {
  #FLAGS_role=${FLAGS_role}
  i=1
  program_dir=$BASE_DIR/dist/${FLAGS_role}${i}
  # clean log
  rm -f ${program_dir}/log/*
  start_program ${FLAGS_role} ${program_dir}    	
}


clean() 
{
  i=1
  program_dir=$BASE_DIR/dist/${FLAGS_role}${i}
  rm -rf ${program_dir}
  sleep 1
  echo "rm -rf ${program_dir} files"
}




stop() 
{
   k_pid=$(ps -fu {{ dingo_user }} | grep "dingodb_server --role coordinator" |grep -v grep|awk '{printf $2 "\n"}')
   for i in $k_pid
   do
   echo $i 
   $(kill -9 $i)
   done
}

usage()
{
        echo "Usage: $0 [clean|deploy|start|stop|restart|cleanstart]"
}

if [ $# -lt 1 ];then
        usage
        exit
fi


if [ "$1" = "deploy" ];then
        deploy
elif [ "$1" = "clean" ];then
        stop
	      clean
elif [ "$1" = "start" ];then
        start

elif [ "$1" = "stop" ];then
        stop

elif [ "$1" = "restart" ];then
        stop
        start

elif [ "$1" = "cleanstart" ];then
        stop
        clean
        deploy
        start

else
        usage
fi
